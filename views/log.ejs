<style>
.chosen-container.chosen-container-single {
    width: 100px !important;
    /* or any value that fits your needs */
}

.error-level {
    font-weight: bold;
    color: #f44336;
}

.warn-level {
    font-weight: bold;
    color: #ff9800;
}

.drop-level {
    font-weight: bold;
    color: #795548;
}

.found-level {
    font-weight: bold;
    color: #4caf50;
}
</style>

<div class="panel panel-default">
    <div class="panel-body" style="margin-left: 15px; margin-right: 15px;">
        <form id="filter-form">
            <div class="form-group" style="margin-bottom: 0;">
            	<input type="hidden" id="file" name="file" value="<%= curFile %>">
                <div class="btn-group levelsFilter" data-toggle="buttons">
                	<% levelsType = ['error', 'warn', 'found', 'drop'] %>
                	<% levelsColor = {error: '#f44336', warn: '#ff9800', drop: '#795548', found: '#4caf50'} %>
                	<% _.each(levelsType, function(level) { %>
						<label class="btn btn-default <%= curLevels.indexOf(level) > -1 ? 'active' : '' %>" style="color: <%= levelsColor[level] %>; font-weight: bold;">
							<input name="levels[]" type="checkbox" value="<%= level %>" <%= curLevels.indexOf(level) > -1 ? 'checked' : '' %>><%= level %>
						</label>
                	<% }); %>
                </div>
                <div class="pull-right">
                    <select class="form-control chosen-select fileSelector">
                    	<% _.each(logFiles, function(file) { %>
                    		<option value="<%= file %>" <%= file == curFile ? 'selected="selected"' : '' %>><%= file.split('server.log.')[1] %></option>
                    	<% }); %>
                    </select>
                </div>
            </div>
        </form>
    </div>
</div>
<div class="container-fluid">
    <dl id="log" class="dl-horizontal">
		<%
			var processDebugLine = function (line) {
			    var buildLink = function (href, text) {
			        return '<a href="' + href + '">' + text + '</a>';
			    };

			    // Feed metadata
			    if (typeof line.feed != 'undefined') {
			        if (line.feed) {
			            line.message = buildLink(providers[line.feed].POST_URL.replace(/\{postId\}/, line.postId), line.name) + ' ' + line.message;
			        } else {
			            line.message = line.name + ' ' + line.message;
			        }
			    }

			    // Category
			    if (typeof line.category != 'undefined') {
			        line.message += '&emsp;';
			        line.message += line.category;
			        line.message += '>';
			        line.message += line.category1;
			    }

			    // Post ID
			    if (typeof line.postId1 != 'undefined') {
			        line.message += '&emsp;';
			        line.message += buildLink(providers[line.feed].POST_URL.replace(/\{postId\}/, line.postId), line.postId);
			        line.message += '>';
			        line.message += buildLink(providers[line.feed].POST_URL.replace(/\{postId\}/, line.postId1), line.postId1);
			    }

			    // IMDb metadata
			    if (typeof line.imdb != 'undefined') {
			        line.message += '&emsp;';
			        line.message += buildLink(providers.imdb.TITLE_URL.replace(/\{imdbId\}/, line.imdb), 'IMDb');

			        if (typeof line.imdb1 != 'undefined') {
			            line.message += '>';
			            line.message += buildLink(providers.imdb.TITLE_URL.replace(/\{imdbId\}/, line.imdb1), 'IMDb1');
			        }
			    }

			    // NFOmation metadata
			    if (typeof line.nfo != 'undefined' && typeof line.nfo1 != 'undefined') {
			        line.message += '&emsp;';
			        line.message += buildLink(providers.nfomation.NFO_URL.replace(/\{nfo\}/, line.nfo), 'NFO');
			        line.message += '>';
			        line.message += buildLink(providers.nfomation.NFO_URL.replace(/\{nfo\}/, line.nfo1), 'NFO1');
			    }

			    // close dd tag
			    line.message += '</dd>';

			    // uncaughtException
			    if (line.level == 'error' && typeof line.stack != 'undefined') {
			        line.stack.forEach(function (value) {
			            line.message += '<dd>' + value + '</dd>';
			        });
			    }
			};
		%>

    	<% _.each(content, function(line) { %>
            <% if (curLevels.indexOf(line.level) > -1) { %>
                <% processDebugLine(line); %>
                <dt><span class="timestamp-level"><%= moment(line.timestamp).tz('Europe/Lisbon').format('DD/MM/YYYY HH:mm:ss') %></span></dt>
                <dd><span class="<%= line.level %>-level"><%= line.level %>:&emsp;</span><%- line.message %>
            <% } %>
    	<% }); %>
    </dl>
</div>

<script>
$(function() {
	var DELAY = 200;
	var prevTarget = null;
    var clicks = 0;
    var timer = null;

    // chosen init
    $('.chosen-select').chosen({
    	disable_search_threshold: 10
    });

    $('.levelsFilter')
        .on('click', function (e) {
            clicks++; //count clicks

            if (clicks === 1 || prevTarget != e.currentTarget) {
            	prevTarget = e.currentTarget;
                timer = setTimeout(function () {
                    $('form#filter-form').submit();
                    prevTarget = null;
                    clicks = 0; //after action performed, reset counter
                }, DELAY);
            } else {
            	clearTimeout(timer);
            	$('.levelsFilter label').removeClass('active');
				$('.levelsFilter input').prop('checked', false);
				$(e.target).find('input').prop('checked', true);
				$('form#filter-form').submit();
				prevTarget = null;
				clicks = 0; //after action performed, reset counter
            }
        })
        .on('dblclick', function (e) {
            e.preventDefault(); //cancel system double-click event
        });

	$('.fileSelector').change(function() {
		$('#file').val($(this).val());
		$('form#filter-form').submit();
	});
});
</script> 